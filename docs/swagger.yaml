definitions:
  usecase.AuthRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  usecase.DeleteUserResponse:
    properties:
      message:
        example: User deleted successfully
        type: string
    type: object
  usecase.MessageRequest:
    properties:
      message:
        example: Hello, everyone!
        type: string
    required:
    - message
    type: object
  usecase.RefreshRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  usecase.RoomCreateRequest:
    properties:
      room_name:
        example: General Discussion
        type: string
    required:
    - room_name
    type: object
  usecase.RoomCreateResponse:
    properties:
      id:
        example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        type: string
    type: object
  usecase.RoomResponse:
    properties:
      id:
        example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        type: string
      name:
        example: General Discussion
        type: string
      users:
        example:
        - 00DBA43A-5F6D-46DE-A07C-E76FB55435ED
        - DFD4FC58-6FB7-4CDC-97F6-151E4125B617
        items:
          type: string
        type: array
    type: object
  usecase.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  usecase.UserCreateInput:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: securepassword
        type: string
    required:
    - email
    - name
    - password
    type: object
  usecase.UserCreateResponse:
    properties:
      message:
        example: User created successfully
        type: string
    type: object
  usecase.UserResponse:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: John Doe
        type: string
    type: object
  usecase.UserUpdateInput:
    properties:
      email:
        example: john.smith@example.com
        type: string
      name:
        example: John Smith
        type: string
      password:
        example: newsecurepassword
        type: string
    type: object
  usecase.UserUpdateResponse:
    properties:
      message:
        example: User updated successfully
        type: string
    type: object
info:
  contact: {}
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returns JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/usecase.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.TokenResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/usecase.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.TokenResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /chat/rooms:
    get:
      description: Get a list of all available chat rooms and their members
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.RoomResponse'
            type: array
      summary: List all chat rooms
      tags:
      - chat
    post:
      consumes:
      - application/json
      description: Create a new chat room with the authenticated user as creator
      parameters:
      - description: Room information
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/usecase.RoomCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.RoomCreateResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new chat room
      tags:
      - chat
  /chat/rooms/{id}:
    delete:
      description: Delete a specific chat room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Room not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a chat room
      tags:
      - chat
  /chat/rooms/{id}/ws:
    get:
      description: Establish a WebSocket connection to a specific chat room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "404":
          description: Room not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Connect to a chat room via WebSocket
      tags:
      - chat
  /chat/rooms/message/{id}:
    post:
      consumes:
      - application/json
      description: Send a message to a specific chat room that the user is a member
        of
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      - description: Message content
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/usecase.MessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: User not in room
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Room not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send a message to a chat room
      tags:
      - chat
  /user:
    delete:
      description: Delete the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/usecase.DeleteUserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Get the authenticated user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, and password
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usecase.UserCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/usecase.UserCreateResponse'
        "400":
          description: Invalid request or user already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the authenticated user's information
      parameters:
      - description: User information to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usecase.UserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/usecase.UserUpdateResponse'
        "400":
          description: Invalid request or user already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /user/{email}:
    get:
      consumes:
      - application/json
      description: Find a user by their email address
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.UserResponse'
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Find user by email
      tags:
      - users
swagger: "2.0"
